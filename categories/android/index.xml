<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on StarrySky Blog</title>
    <link>http://starrysky.co.kr/categories/android/</link>
    <description>Recent content in Android on StarrySky Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Sat, 21 Sep 2013 13:50:41 +0900</lastBuildDate>
    <atom:link href="http://starrysky.co.kr/categories/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Efficient rounded corner imageview</title>
      <link>http://starrysky.co.kr/post/2013/Efficient-rounded%20corner-imageview/</link>
      <pubDate>Sat, 21 Sep 2013 13:50:41 +0900</pubDate>
      
      <guid>http://starrysky.co.kr/post/2013/Efficient-rounded%20corner-imageview/</guid>
      <description>

&lt;p&gt;네트워크 상에서 이미지를 다운로드 받아 이미지를 출력 할 때
이미지뷰에 출력전에 이미지 모서리를 둥글게 처리해야 하는 이미지 후처리가 필요한 경우가 자주 있다.&lt;/p&gt;

&lt;p&gt;지금까지 많이들 사용하던 Bitmap으로 받아서 모서리를 투명화 시킨 후 그 비트맵을 다시 리턴하여 이미지뷰에 setImageBitmap 시켜왔었다.&lt;/p&gt;

&lt;p&gt;하지만 이런 경우.
OutOfMemoryException가 발생할 가능성이 높다.
비트맵 리사이클링이 바로바로 처리되지 않는 문제로 인해..&lt;/p&gt;

&lt;p&gt;이 문제로 고민하던 중.
꿈꾸는 개발자의 로그(&lt;a href=&#34;http://kmshack.tistory.com/329#.Uj17QoZUeSo)의&#34;&gt;http://kmshack.tistory.com/329#.Uj17QoZUeSo)의&lt;/a&gt; 김민수 님이 효율적으로 처리하는 방법을!!&lt;/p&gt;

&lt;p&gt;Bitmap을 변수로 가지고 있는 경우 OutOfMemory가 나올 수 있기 때문에
Drawable로 저장을 해두면. 메모리 부족을 피할 수 있고,
Display에 뿌려주기 전에 이미지가 처리되기 때문에 효율적인 운영이 가능하다.&lt;/p&gt;

&lt;p&gt;김민수님의 블로그에서는 예로 이미지를 원형으로 처리하는 소스가 첨부되어있다
소스를 토대로 FadeIn기능과 원형이 아닌 각 꼭지점만 둥글게 처리하도록 코드를 고치면 앞으로 코딩할 때 OutOfMemoryException에서 조금 더 자유로와 질 듯 하다.&lt;/p&gt;

&lt;h1 id=&#34;fadeinroundedimageview-class&#34;&gt;FadeInRoundedImageView.class&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.TransitionDrawable;
import android.util.AttributeSet;
import android.widget.ImageView;

public class FadeInRoundedImageView extends ImageView {
 private final String TAG = getClass().getSimpleName();

 private static final int FADE_IN_TIME_MS = 400;

 public FadeInRoundedImageView(Context context) {
  super(context);
 }

 public FadeInRoundedImageView(Context context, AttributeSet attrs) {
  super(context, attrs);
 }

 public FadeInRoundedImageView(Context context, AttributeSet attrs,
   int defStyle) {
  super(context, attrs, defStyle);
 }

 @Override
 public void setImageBitmap(Bitmap bm) {
  TransitionDrawable td = new TransitionDrawable(new Drawable[] {
    new ColorDrawable(android.R.color.transparent),
    new RoundedCornerDrawable(bm) });

  setImageDrawable(td);
  td.startTransition(FADE_IN_TIME_MS);
 }

}};
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;fadeinroundedimageview-class-1&#34;&gt;FadeInRoundedImageView.class&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;import android.graphics.Bitmap;
import android.graphics.BitmapShader;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;
import android.graphics.PixelFormat;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Shader;
import android.graphics.drawable.Drawable;


public class RoundedCornerDrawable extends Drawable {
 private final Bitmap mBitmap;
 private final Paint mPaint;
 private final RectF mRectF;
 private final int mBitmapWidth;
 private final int mBitmapHeight;

 private final float roundPx = 10;


 public RoundedCornerDrawable(Bitmap bitmap) {  
  final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
  mRectF = new RectF(rect);
  mPaint = new Paint();
  mPaint.setAntiAlias(true);
  mPaint.setDither(true);
  final BitmapShader shader = new BitmapShader(bitmap,
    Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
  mPaint.setShader(shader);

  mBitmapWidth = mBitmap.getWidth();
  mBitmapHeight = mBitmap.getHeight();
 }


 @Override
 public void draw(Canvas canvas) {
  canvas.drawRoundRect(mRectF, roundPx, roundPx, mPaint);
 }

 @Override
 protected void onBoundsChange(Rect bounds) {
  super.onBoundsChange(bounds);
  mRectF.set(bounds);
 }

 @Override
 public void setAlpha(int alpha) {
  if (mPaint.getAlpha() != alpha) {
   mPaint.setAlpha(alpha);
   invalidateSelf();
  }
 }

 @Override
 public void setColorFilter(ColorFilter cf) {
  mPaint.setColorFilter(cf);
 }

 @Override
 public int getOpacity() {
  return PixelFormat.TRANSLUCENT;
 }

 @Override
 public int getIntrinsicWidth() {
  return mBitmapWidth;
 }

 @Override
 public int getIntrinsicHeight() {
  return mBitmapHeight;
 }

 public void setAntiAlias(boolean aa) {
  mPaint.setAntiAlias(aa);
  invalidateSelf();
 }

 @Override
 public void setFilterBitmap(boolean filter) {
  mPaint.setFilterBitmap(filter);
  invalidateSelf();
 }

 @Override
 public void setDither(boolean dither) {
  mPaint.setDither(dither);
  invalidateSelf();
 }

 public Bitmap getBitmap() {
  return mBitmap;
 }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Volley를 통해 mongoDB에 값을 변경해야 하는 경우 처리방법</title>
      <link>http://starrysky.co.kr/post/2013/editMonolabValueWithVolley/</link>
      <pubDate>Sun, 01 Sep 2013 13:50:41 +0900</pubDate>
      
      <guid>http://starrysky.co.kr/post/2013/editMonolabValueWithVolley/</guid>
      <description>&lt;p&gt;MongoDB를 사용하는 경우. java에서 사용 가능한 api가 오픈소스로 존재한다.
mongo-java-driver
&lt;a href=&#34;https://github.com/mongodb/mongo-java-driver/downloads&#34;&gt;https://github.com/mongodb/mongo-java-driver/downloads&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이걸 쓰지 않고 Volley를 이용하는 경우. 이유는 모르겠으나 JsonObjectRequest만 연결이 되는듯 하다&amp;hellip;
데이터를 불러 오는 것은 StringRequest가 가능한데 데이터 변경은 JsonObjectRequest만 되는듯&amp;hellip;
데이터 변경은 PUT으로 처리.&lt;/p&gt;

&lt;p&gt;일반적으로 JsonObjectRequest를 사용하는 이런 식으로 처리하는데
JsonObjectRequest jr = new JsonObjectRequest(
Method.PUT,        // 전송 방법
mUrl,                    //주소
jsonDoc,            //변경할 데이터 문서
new Response.Listener&lt;JSONObject&gt;&amp;hellip;&amp;hellip; ,  //응답이 온 경우
new Response.ErrorListener &amp;hellip;..                //오류가 난 경우&lt;/p&gt;

&lt;p&gt;개발 중 쿼리를 통해 데이터를 필터링 하고, 필터링 된 데이터를 모두 삭제한번에 삭제하려 하는 경우. 변경할 데이터 문서에 다른 내용 필요없이 &amp;ldquo;[]&amp;rdquo; 값만 주면 된다.&lt;/p&gt;

&lt;p&gt;하지만 변경할 데이터 문서는 JSONObject 형식이여야 하므로 &amp;ldquo;[]&amp;ldquo;로 생성하면 오류를 발생한다.
이런 경우. 변경할 데이터 문서에 null을 주고 getBody()로 추가해주면 된다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public byte[] getBody() {
    String body = &amp;quot;[]&amp;quot;;
    return body.getBytes();
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Android zip or gz(gzip) 압축풀기</title>
      <link>http://starrysky.co.kr/post/2012/android_zip_or_gz/</link>
      <pubDate>Wed, 04 Apr 2012 05:49:41 +0900</pubDate>
      
      <guid>http://starrysky.co.kr/post/2012/android_zip_or_gz/</guid>
      <description>&lt;p&gt;안드로이드에서 zip과 gz 압축을 해제하는 코드 구현.
1. 우선 zip과 gzip의 차이부터 알아야 한다.
zip은 인코딩 문제로 한글파일이 압축이 안됨.
gzip은 한글파일 압축 가능
zip은 여러(복수)개의 파일을 하나의 파일로 압축가능
gzip(gz)은 하나의 파일만 압축가능
그러므로 여러(복수)개의 파일을 gzip으로 압축하기 위해서는 tar로 파일을 하나로 묶은 후 gzip으로 압축가능.
zip
gzip(gz)
한글파일 압축 가능 여부
불가능
가능
여러(복수)개의 파일 압축 가능 여부
가능
불가능
2. zip 파일 압축 해제
zip파일 압축 푸는 소스는 쉽게 구할 수 있다.
그중 하나(&lt;a href=&#34;http://android-er.blogspot.com/2011/04/unzip-compressed-file-using-javautilzip.html)를&#34;&gt;http://android-er.blogspot.com/2011/04/unzip-compressed-file-using-javautilzip.html)를&lt;/a&gt; 소개하면
unzip(압축파일절대경로, 압축해제폴더);
펼침/접힘 단어 입력 :zip파일 압축해제 소스보기
private void unzip(String src, String dest){
final int BUFFER_SIZE = 4096;
BufferedOutputStream bufferedOutputStream = null;
FileInputStream fileInputStream;
try {
fileInputStream = new FileInputStream(src);
ZipInputStream zipInputStream
= new ZipInputStream(new BufferedInputStream(fileInputStream));
ZipEntry zipEntry;
while ((zipEntry = zipInputStream.getNextEntry()) != null){
String zipEntryName = zipEntry.getName();
File file = new File(dest + zipEntryName);
if (file.exists()){
} else {
if(zipEntry.isDirectory()){
file.mkdirs();
}else{
byte buffer[] = new byte[BUFFER_SIZE];
FileOutputStream fileOutputStream = new FileOutputStream(file);
bufferedOutputStream
= new BufferedOutputStream(fileOutputStream, BUFFER_SIZE);
int count;
while ((count
= zipInputStream.read(buffer, 0, BUFFER_SIZE)) != -1) {
bufferedOutputStream.write(buffer, 0, count);
}
bufferedOutputStream.flush();
bufferedOutputStream.close();
}
}
}
zipInputStream.close();
} catch (FileNotFoundException e) {
// TODO Auto-generated catch block
e.printStackTrace();
}catch (IOException e) {
// TODO Auto-generated catch block
e.printStackTrace();
}
}
3. gz(gzip) 파일 압축 해제
위에서 설명하였든 gz파일은 zip과는 다르게 하나의 파일만을 압축한다.
그러므로 미리 위에서 설명한 unzip함수 중 ZipEntry 클래스가 필요가 없다.
ZipEntry는 Zip파일에서 각각의 파일을 추출하기 위한 클래스이므로 gz에서는 필요가 없다.
그러므로 불필요한 코드를 지우고 나면 gz파일을 해제 할 수 있는 코드가 된다.
1. ZipInputStream을 GZIP에 맞게 변경하기
2. ZipEntry관련 코드 지우기
unGZIP(
압축파일절대경로, 압축해제파일절대경로);
펼침/접힘 단어 입력 :gzip파일 압축해제 소스보기
mso-font-kerning:0pt&amp;rdquo;&amp;gt;private10.0pt;font-family:Consolas;color:black;mso-font-kerning:0pt&amp;rdquo;&amp;gt;mso-font-kerning:0pt&amp;rdquo;&amp;gt;void10.0pt;font-family:Consolas;color:black;mso-font-kerning:0pt&amp;rdquo;&amp;gt;unGZIP(String src, String dest){font-family:Consolas;mso-font-kerning:0pt&amp;rdquo;&amp;gt;
mso-font-kerning:0pt&amp;rdquo;&amp;gt;0pt&amp;rdquo;&amp;gt;finalfont-family:Consolas;color:black;mso-font-kerning:0pt&amp;rdquo;&amp;gt;mso-font-kerning:0pt&amp;rdquo;&amp;gt;int10.0pt;font-family:Consolas;color:black;mso-font-kerning:0pt&amp;rdquo;&amp;gt;BUFFER_SIZE = 4096;mso-font-kerning:0pt&amp;rdquo;&amp;gt;
BufferedOutputStream bufferedOutputStream = color:#7F0055;mso-font-kerning:0pt&amp;rdquo;&amp;gt;null;
mso-font-kerning:0pt&amp;rdquo;&amp;gt;FileInputStream fileInputStream;0pt&amp;rdquo;&amp;gt;
mso-font-kerning:0pt&amp;rdquo;&amp;gt;
mso-font-kerning:0pt&amp;rdquo;&amp;gt;0pt&amp;rdquo;&amp;gt;try {
mso-font-kerning:0pt&amp;rdquo;&amp;gt;fileInputStream = mso-font-kerning:0pt&amp;rdquo;&amp;gt;new 10.0pt;font-family:Consolas;color:black;mso-font-kerning:0pt&amp;rdquo;&amp;gt;FileInputStream(src);font-family:Consolas;mso-font-kerning:0pt&amp;rdquo;&amp;gt;
mso-font-kerning:0pt&amp;rdquo;&amp;gt;GZIPInputStream yellow;mso-highlight:yellow&amp;rdquo;&amp;gt;gzipInputStream
mso-font-kerning:0pt&amp;rdquo;&amp;gt;= mso-font-kerning:0pt&amp;rdquo;&amp;gt;new10.0pt;font-family:Consolas;color:black;mso-font-kerning:0pt&amp;rdquo;&amp;gt;GZIPInputStream(mso-font-kerning:0pt&amp;rdquo;&amp;gt;new 10.0pt;font-family:Consolas;color:black;mso-font-kerning:0pt&amp;rdquo;&amp;gt;BufferedInputStream(fileInputStream));10.0pt;font-family:Consolas;mso-font-kerning:0pt&amp;rdquo;&amp;gt;
File file = 0pt&amp;rdquo;&amp;gt;new File(dest);
mso-font-kerning:0pt&amp;rdquo;&amp;gt;mso-font-kerning:0pt&amp;rdquo;&amp;gt;if10.0pt;font-family:Consolas;color:black;mso-font-kerning:0pt&amp;rdquo;&amp;gt;(file.exists()) {0pt&amp;rdquo;&amp;gt;
mso-font-kerning:0pt&amp;rdquo;&amp;gt;}mso-font-kerning:0pt&amp;rdquo;&amp;gt;else10.0pt;font-family:Consolas;color:black;mso-font-kerning:0pt&amp;rdquo;&amp;gt;{0pt&amp;rdquo;&amp;gt;
mso-font-kerning:0pt&amp;rdquo;&amp;gt;mso-font-kerning:0pt&amp;rdquo;&amp;gt;byte10.0pt;font-family:Consolas;color:black;mso-font-kerning:0pt&amp;rdquo;&amp;gt;buffer[] = mso-font-kerning:0pt&amp;rdquo;&amp;gt;new10.0pt;font-family:Consolas;color:black;mso-font-kerning:0pt&amp;rdquo;&amp;gt;mso-font-kerning:0pt&amp;rdquo;&amp;gt;byte10.0pt;font-family:Consolas;color:black;mso-font-kerning:0pt&amp;rdquo;&amp;gt;[BUFFER_SIZE];0pt&amp;rdquo;&amp;gt;
FileOutputStream fileOutputStream = 0pt&amp;rdquo;&amp;gt;new FileOutputStream(file);
mso-font-kerning:0pt&amp;rdquo;&amp;gt;bufferedOutputStream = 10.0pt;font-family:Consolas;color:#7F0055;mso-font-kerning:0pt&amp;rdquo;&amp;gt;newmso-font-kerning:0pt&amp;rdquo;&amp;gt;BufferedOutputStream(fileOutputStream, BUFFER_SIZE);0pt&amp;rdquo;&amp;gt;
mso-font-kerning:0pt&amp;rdquo;&amp;gt;mso-font-kerning:0pt&amp;rdquo;&amp;gt;int10.0pt;font-family:Consolas;color:black;mso-font-kerning:0pt&amp;rdquo;&amp;gt;count;0pt&amp;rdquo;&amp;gt;
mso-font-kerning:0pt&amp;rdquo;&amp;gt;mso-font-kerning:0pt&amp;rdquo;&amp;gt;while10.0pt;font-family:Consolas;color:black;mso-font-kerning:0pt&amp;rdquo;&amp;gt;((count = gzipInputStream.read(buffer,0, BUFFER_SIZE)) != -1){
bufferedOutputStream.write(buffer, 0, count);
mso-font-kerning:0pt&amp;rdquo;&amp;gt;}0pt&amp;rdquo;&amp;gt;
mso-font-kerning:0pt&amp;rdquo;&amp;gt;bufferedOutputStream.flush();10.0pt;font-family:Consolas;mso-font-kerning:0pt&amp;rdquo;&amp;gt;
mso-font-kerning:0pt&amp;rdquo;&amp;gt;bufferedOutputStream.close();10.0pt;font-family:Consolas;mso-font-kerning:0pt&amp;rdquo;&amp;gt;
}
mso-font-kerning:0pt&amp;rdquo;&amp;gt;mso-highlight:silver&amp;rdquo;&amp;gt;gzipInputStream.close();
mso-font-kerning:0pt&amp;rdquo;&amp;gt;File s = 0pt&amp;rdquo;&amp;gt;newfont-family:Consolas;color:black;mso-font-kerning:0pt&amp;rdquo;&amp;gt;File(src);0pt&amp;rdquo;&amp;gt;
mso-font-kerning:0pt&amp;rdquo;&amp;gt;s.delete();
mso-font-kerning:0pt&amp;rdquo;&amp;gt;} 0pt&amp;rdquo;&amp;gt;catchfont-family:Consolas;color:black;mso-font-kerning:0pt&amp;rdquo;&amp;gt;(FileNotFoundException e) {
mso-font-kerning:0pt&amp;rdquo;&amp;gt;e.printStackTrace();0pt&amp;rdquo;&amp;gt;
mso-font-kerning:0pt&amp;rdquo;&amp;gt;} 0pt&amp;rdquo;&amp;gt;catchfont-family:Consolas;color:black;mso-font-kerning:0pt&amp;rdquo;&amp;gt;(IOException e) {
e.printStackTrace();
}
}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Code &amp; Android JNI Code의 Speed Test.</title>
      <link>http://starrysky.co.kr/post/2011/jni_speed_test/</link>
      <pubDate>Sun, 18 Dec 2011 05:33:41 +0900</pubDate>
      
      <guid>http://starrysky.co.kr/post/2011/jni_speed_test/</guid>
      <description>&lt;p&gt;안드로이드 기본 코드와 NDK를 이용한 JNI 코드의 속도가 궁굼하여 테스트.
- 테스트 함수
인자값을 받아 1부터 인자값까지 모든 수 합을 구하고 인자값만큼 루프.
for(int i=1; i&amp;lt;=mNum; i++){
for(int n=1; n&amp;lt;=mNum; n++){
sum += n;
}
}
- 결과
수치 - 결과값
기본코드
JNI코드
10
0
0
100
11
0
1000
1515
74
3000
11287
636
5000
24661
1406
- 테스트 시 예외점
컴파일의 최적화 차이로 연산방법에 따른 차이가 생김.
- 결론
어떤 연산을 처리하느냐에 따라 처리속도 비율이 차이가 나지만,
결론은 JNI 코드가 최소 10배 이상 빠른듯 하다.(최소10배는 확실치 않은 수치)
- 코드구현
1. NdkSppedTest2Activity.java
펼침/접힘 단어 입력 :
펼쳐보기
package com.test;
import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
public class NdkSpeedTest2Activity extends Activity implements OnClickListener {
/** Called when the activity is first created. &lt;em&gt;/
private TextView tv1;
private Button bt1;
private EditText et1;
private int mNum=0;
private String mS;
private long sum, Bsum, timer1, timer2, Atimer, Btimer;
private nativeJava nativeLib = new nativeJava();
@Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.main);
tv1 = (TextView) findViewById(R.id.textView1);
bt1 = (Button) findViewById(R.id.button1);
et1 = (EditText) findViewById(R.id.editText1);
bt1.setOnClickListener(this);
}
public void speedTest(){
Atimer = 0;
Btimer = 0;
sum = 0;
Bsum = 0;
timer1 = System.currentTimeMillis();
for(int i=1; i&amp;lt;=mNum; i++){
for(int n=1; n&amp;lt;=mNum; n++){
sum += n;
}
}
timer2 = System.currentTimeMillis();
Atimer = timer2 - timer1;
timer1 = System.currentTimeMillis();
Bsum = nativeLib.Proc(mNum);
timer2 = System.currentTimeMillis();
Btimer = timer2 - timer1;
mS = &amp;ldquo;Test set - &amp;rdquo; + mNum +
&amp;ldquo;\nAndroid - &amp;ldquo; + sum + &amp;ldquo;, [ &amp;ldquo; + Atimer + &amp;ldquo;ms ]&amp;rdquo; +
&amp;ldquo;\nNDK - &amp;ldquo; + Bsum +&amp;rdquo;, [ &amp;ldquo; + Btimer + &amp;ldquo;ms ]&amp;rdquo;;
tv1.setText(mS);
}
public void onClick(View v) {
mS = et1.getText().toString();
mNum = Integer.parseInt(mS);
speedTest();
}
}
2. nativeJava.java
펼침/접힘 단어 입력 :
펼쳐보기
package com.test;
public class nativeJava {
public native long Proc(int n);
static{
System.loadLibrary(&amp;ldquo;nativeJava&amp;rdquo;);
}
}
3. nativeJava.h
펼침/접힘 단어 입력 :
펼쳐보기
/&lt;/em&gt; DO NOT EDIT THIS FILE - it is machine generated &lt;em&gt;/
#include&lt;jni.h&gt;
/&lt;/em&gt; Header for class com_test_nativeJava &lt;em&gt;/
#ifndef _Included_com_test_nativeJava
#define _Included_com_test_nativeJava
#ifdef __cplusplus
extern &amp;ldquo;C&amp;rdquo; {
#endif
/&lt;/em&gt;
* Class: com_test_nativeJava
* Method: Proc
* Signature: (I)V
*/
JNIEXPORT jlong JNICALL Java_com_test_nativeJava_Proc
(JNIEnv *, jobject, jint);
#ifdef __cplusplus
}
#endif
#endif
4. nativeJava.c
펼침/접힘 단어 입력 :
펼쳐보기
#include&lt;jni.h&gt;
#include&lt;stdio.h&gt;
#include&lt;string.h&gt;
#include &amp;ldquo;nativeJava.h&amp;rdquo;
JNIEXPORT jlong JNICALL Java_com_test_nativeJava_Proc
(JNIEnv *env, jobject obj, jint n)
{
jlong lo=0; jint i = 1; jint o = 1;
for(i=1; i&amp;lt;=n; i++){ for(o=1; o&amp;lt;=n; o++){ lo += o; } }
return lo;
}
5. main.xml
펼침/접힘 단어 입력 :
펼쳐보기
&amp;lt;?xml version=&amp;ldquo;1.0&amp;rdquo; encoding=&amp;ldquo;utf-8&amp;rdquo;?&amp;gt;&lt;LinearLayout xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;
android:layout_width=&#34;fill_parent&#34;
android:layout_height=&#34;fill_parent&#34;
android:orientation=&#34;vertical&#34;&gt;&lt;LinearLayout
android:id=&#34;@+id/linearLayout1&#34;
android:layout_width=&#34;match_parent&#34;
android:layout_height=&#34;wrap_content&#34;
android:layout_weight=&#34;0.61&#34;
android:orientation=&#34;vertical&#34;&gt;&lt;TextView
android:id=&#34;@+id/textView1&#34;
android:layout_width=&#34;match_parent&#34;
android:layout_height=&#34;match_parent&#34;
android:text=&#34;TextView&#34; /&gt;&lt;/LinearLayout&gt;&lt;LinearLayout
android:id=&#34;@+id/linearLayout2&#34;
android:layout_width=&#34;match_parent&#34;
android:layout_height=&#34;wrap_content&#34;&gt;&lt;EditText
android:id=&#34;@+id/editText1&#34;
android:layout_width=&#34;105dp&#34;
android:layout_height=&#34;wrap_content&#34;
android:layout_weight=&#34;0.25&#34; /&gt;&lt;Button
android:id=&#34;@+id/button1&#34;
android:layout_width=&#34;wrap_content&#34;
android:layout_height=&#34;wrap_content&#34;
android:layout_weight=&#34;0.25&#34;
android:text=&#34;비교하기&#34; /&gt;&lt;/LinearLayout&gt;&lt;/LinearLayout&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>android 알파벳을 정수로 형변환.</title>
      <link>http://starrysky.co.kr/post/2011/char2int/</link>
      <pubDate>Sun, 18 Sep 2011 02:36:41 +0900</pubDate>
      
      <guid>http://starrysky.co.kr/post/2011/char2int/</guid>
      <description>&lt;p&gt;a = 97
z = 122
A = 65
Z = 90
대문자 소문자
65 - 9097-122
평소 C에서 내 기억에는 소문자 다음에 대문자였던거 같은데.
안드로이드는 다른가;;
C에서의 대소문자값은 이미 하늘 나라로.
private boolean TextCheck(String source){
for(int n=0; n&lt;source.length(); n++){
char current = source.charAt(n);
if(current&gt;= &amp;lsquo;A&amp;rsquo;&amp;amp;&amp;amp;current&amp;lt;= &amp;lsquo;z&amp;rsquo;);
elsereturn false;
}
return true;
}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2011년 08월 19일</title>
      <link>http://starrysky.co.kr/post/2011/finaltest_20110819/</link>
      <pubDate>Thu, 18 Aug 2011 16:01:41 +0900</pubDate>
      
      <guid>http://starrysky.co.kr/post/2011/finaltest_20110819/</guid>
      <description>

&lt;p&gt;Camera Preview 사용하여
화면 클릭 시,
onShotScreen을 이용하여 화면을 Byte[]로 저장 후
Tesseract-Android-tools를 이용.
그리고 인식된 문자를
google-api-translate-java 로 번역.
추가. 가까운 글자의 경우 포커스 문제로 문자 인식 불가로. &amp;lsquo;오토포커스&amp;rsquo; 메뉴를 추가하여 포커스 설정.
해당 기능의 유지 및 제거 결정은 영상의 실시간 처리에 문제를 일으킬수 있으므로 유보.
앞으로 완료할 일.
쓰레드를 이용하여 클릭이 아닌 문자영역을 자동으로 찾아 라벨링까지.
추가로 ocr을 통한 문자에 인식 오류로 특문이 포함된 경우, 알파벳 이외의 문자는 제거
문자로 인식된 문자만 노출 및 번역이 진행되어야 함.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;필요-기술-및-제원&#34;&gt;필요 기술 및 제원.&lt;/h1&gt;

&lt;p&gt;1-1 Camera Preview -&amp;gt;OpenCV를 이용한 영상처리.&lt;br&gt;
1-2 영상의 이진화, 라벨링.&lt;br&gt;
2-1 라벨링영역 트래킹.&lt;br&gt;
3-1 트래킹을 통한 좌표값을 이용. 인식된 문자와 번역된 문자를 openGL ES를 통해 출력draw.&lt;br&gt;
4-1 문자를 이미지로 생성하여 생성된 이미지를 트래킹 좌표의 영상에 매핑.&lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;초기화면 : 풀스크린모드, 하단부 안내 메시지 노출.&lt;br&gt;
&lt;img src=&#34;http://starrysky.co.kr/img/2011/20110918_1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;메뉴화면 : 포커스 설정을 위해 오토포커스 메뉴 추가. 세팅메뉴는 현재 미구현.&lt;br&gt;
&lt;img src=&#34;http://starrysky.co.kr/img/2011/20110918_2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[메뉴]-[Camera AutoFocus] 선택 시, 포커스 재설정.&lt;br&gt;
&lt;img src=&#34;http://starrysky.co.kr/img/2011/20110918_3.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;화면클릭 시, ocr분석 및 translate 작업. 후 상단과 중단에 인식된 문자와 번역된 문자 노출.
화면 내 ocr은 한종류의 언어만 가능.(화면상 영어, 한글이 동시 존재하여도 설정한 언어만 인식.)
인식이 잘못된 경우에도 translate작업은 진행 됨.&lt;br&gt;
&lt;img src=&#34;http://starrysky.co.kr/img/2011/20110918_4.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
졸작 완성도 : 20프로 정도?? ㅠㅠㅠㅠ
하늘이 내마음 대변하는듯하다 우후훗
그래도 화이팅 ㅎ&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MAC에서 Android 어플 개발시 EVOCAM의 web Server 기능은 사용 불가능.</title>
      <link>http://starrysky.co.kr/post/2011/finaltest_20110722/</link>
      <pubDate>Fri, 22 Jul 2011 06:19:41 +0900</pubDate>
      
      <guid>http://starrysky.co.kr/post/2011/finaltest_20110722/</guid>
      <description>&lt;p&gt;Mac( 스노우레오파드 ) + EvoCAM ( v3.7.4 )
MAC에서 안드로이드 어플 개발 중.
Camera를 써야 해서 이것저것 알아보는데.
일반적으로 android의 에뮬레이터에서는 웹캠의 카메라를 인식 못한다.
하지만 이를 우회하는 방법으로
카메라로 들어오는 이미지를 브로드캐스팅(라디오 전파처럼)으로 무작정 뿌려주게 한뒤
카메라 입력을 희망하는 어플내에서 카메라센서로 들어오는 변수 대신에 뿌려주는 이미지를 캐치( ip세팅을 통해)하여 임시로 테스트 할 수 있다.
하지만 이건 windows에서나 가능할 뿐&amp;hellip;..(linux는 모르겠다.)
이 방법 중에 브로드캐스팅으로 뿌려주기 위해서는 jmf라는 자바의 부가 기능을 이용하여야 하는데
Mac에서는 이게 지원되지 않는다.
그래서 mac에서 사용할 수 있다고 하는 evocam을 설치하였는데.
결론은 android(안드로이드)에서는 사용 할 수 없다.
처음 어플을 실행해도 검정화면만 나와서 잘 못 코딩했나 싶어서 인터넷도 찾아보고 했는데.
블랙베리나 아이폰은 되는데 안드로이드는 안된다.
참고 : &lt;a href=&#34;http://www.google.com/support/forum/p/android/thread?tid=1a5526b679315cf5&amp;amp;hl=en&#34;&gt;http://www.google.com/support/forum/p/android/thread?tid=1a5526b679315cf5&amp;amp;hl=en&lt;/a&gt;
누군가 나와 동일한 이유에선가 질문 글을 올렸고 마지막에 보면 대략의 답이 나온거 같다.
이유인 즉,
evocam의 경우 영상을 브로드캐스팅 할 때 이미지를 연속으로 보내는 방법인데.
안드로이드는 연속으로 받지 않기 때문에 로딩이 완료되지 않는다고 한다.
실제 아이패드 또는 windows의 익스플로어에서는 잘 보여지며, 나의 테스트 기기인 베가 또는 에뮬레이터에서는 무한 로딩으로 된다.
여기서 궁굼한것은 evocam은 자바 어플릿과 서버 푸쉬인 두가지 브로드캐스팅을 지원하는데
자바에서 탄생한 안드로이드가 자바어플릿을 통한 영상재생이 지원 안되는 이유를 모르겠다.
아이패드도 가능한 기능이 왜!!!
암튼!!!
이것때문에 몇일 삽질.
그냥 핸드폰 주구장창 연결해 놔야겠군아. ㅠㅠ&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;img src=&#34;http://starrysky.co.kr/img/2011/20110722.jpg&#34; alt=&#34;&#34; /&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;p.s 다른 프로그램은 없을까 해서 찾던 중 periscope라는 프로그램을 알게되었다.
하지만 이것은 음성 또는 영상에 변화가 있을 경우 사진을 찍어 미리 설정해둔 이메일 또는 ftp로 사진을 전송한다.
즉, server가 되어 영상을 뿌려주는 것이 아닌 주변변화(예, 도둑)가 있는 경우 사진을 찍는다.
애증의 mac&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>opencv for android</title>
      <link>http://starrysky.co.kr/post/2011/finaltest_20110720/</link>
      <pubDate>Wed, 20 Jul 2011 19:19:41 +0900</pubDate>
      
      <guid>http://starrysky.co.kr/post/2011/finaltest_20110720/</guid>
      <description>

&lt;p&gt;Using OpenCV in Android. This tutorial is tested under Ubuntu 10.04 + Android SDKr07 + Android NDKr4b.
Preparing the development environment
개발하기전 SDK, ADT plugin, android NDK 설치한다.
Download and install Android SDK. Details can be found here
Download eclipse and install the ADT plugin. Details can be found here
Download Androdi NDK. This tool is used to cross compile OpenCV source code to Android. Currently (NDK r4) only C is fully supported, so I can only use OpenCV 1.1 under Android. The laterst version of OpenCV uses lots of STL functions. :(
Create the test project ( 테스트 프로젝트 만들기)
Create a new Android project in eclipse. For example, called testOpenCV. Name the package name as: edu.stanford.android.
이클립스에서 새로운 안드로이드 프로젝트를 만든다. 이름은 testOpenCV로 하고 package 이름은 edu.stanford.android 로 정한다.
In the root directory of the project, create a new folder called jni and extract all files in android_opencv.tar.gz to this folder.
프로젝트의 루트 디렉토리에서 jni라는 새로운 폴더를 만들고 android_opencv.tar.gz 에 있는 모든 파일을 추출해서 이 폴더에 넣는다.
Run “$NDK/ndk-build” from your project directory. It will generate libopencv.so in the libs/armeabi folder.
이 단계를 하기 전에 프로젝트를 cygwin 아래에 있는 ndk 폴더 아래에다가 저장을 한다.
cygwin에서 이 프로젝트 폴더로 가서 ndk-build를 하면 libitestopencv.so 파일이 lib/armeabi 폴더에 있을것이다.
Write Java code to use OpenCV functions. I have three java files which can be downloaded here. The general idea is that I use the intent to start the camera or gallery activities to get the image and send this image to OpenCV. After OpenCV finishes extracting SURF features, it send the processed image back to JVM. The interface between JVM and OpenCV is pretty simple: setSourceImage and getSourceImage.
opencv 함수를 이용하여 자바 코드를 작성한다. 세 자바 코드 파일을 다운로드한다. 전반적인 아이디어는 이미지를 받고 opencv로 보내려고 카메라나 갤러리를 구동하기 위해서 인텐트를 이용한다. opencv가 SURF 정보를 추출한 후엔 processed image를 JVM으로 보낸다. JVM 과 opencv간의 인터페이스를 꽤 간단하다. (setSourceImage&amp;amp;getSourceImage)&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;opencv-java&#34;&gt;OpenCV.java&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;package edu.stanford.zixuanpc;
public class OpenCV {
static{
    System.loadLibrary(&amp;quot;opencv&amp;quot;);
}
public native boolean setSourceImage(int[] pixels, int width, int height);
public native byte[] getSourceImage();
public native void extractSURFFeature();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
And here is the code how we use these two functions:
여기에 두 함수를 어떻게 사용하는지 나와있다.&lt;/p&gt;

&lt;h1 id=&#34;code-snippet-in-testopencvactivity-java&#34;&gt;Code snippet in testOpenCVActivity.java&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Bitmap bitmap = BitmapFactory.decodeFile(mCurrentImagePath);
int width = bitmap.getWidth();
int height = bitmap.getHeight();
int[] pixels = new int[width * height];
bitmap.getPixels(pixels, 0, width, 0, 0, width, height);
opencv.setSourceImage(pixels, width, height);
opencv.extractSURFFeature();
byte[] imageData = opencv.getSourceImage();
bitmap = BitmapFactory.decodeByteArray(imageData, 0, imageData.length);
mImageView.setImageBitmap(bitmap);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;run-the-program&#34;&gt;Run the program&lt;/h1&gt;

&lt;p&gt;Press the menu button to select your camera to capture an image. The down-sampled image is saved in your gallery. Press the menu button again to select it from your gallery and features are automatically extracted.&lt;br&gt;
이미지를 찍기 위하여 카메라 메뉴 버튼을 눌러라. 다운로드한 샘플 사진이 갤러리에 저장되어 있다. 갤러리에서 사진을 선택하기위해서 메뉴 버튼을 눌러라. 그리고 정보는 자동적으로 추출된다.&lt;br&gt;
Notice: if you select a large image in the gallery, the program may crash due to limited memory.&lt;br&gt;
주의 : 만약 갤러리에서 큰 이미지를 선택하였다면 한정된 메모리때문에 프로그램이 충돌이 일어날 수 있다.
On my DROID phone, it usually takes 4 seconds to extract features from one image.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;my-test-state-2011-07-20&#34;&gt;My Test State ( 2011. 07. 20 )&lt;/h1&gt;

&lt;p&gt;테스트 환경( iMAC + Android 2.2 + NDKr4b )
- 기존 sdk, ndk, adt 설치되어 있었으며, ndk-build의 경우 문제없이 한번에 통과 됨.
실행단계
1. 어플 실행
2. 첫 화면은 검정.
3. 메뉴&amp;gt;카메라&amp;gt;사진촬영
4. 메뉴&amp;gt;갤러리&amp;gt;사진 선택
5. opencv 이미지 처리
6. 처리 결과 view&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://starrysky.co.kr/img/2011/20110720_1.jpg&#34; alt=&#34;&#34; /&gt;&lt;br&gt;
&lt;img src=&#34;http://starrysky.co.kr/img/2011/20110720_2.jpg&#34; alt=&#34;&#34; /&gt;&lt;br&gt;
&lt;img src=&#34;http://starrysky.co.kr/img/2011/20110720_3.jpg&#34; alt=&#34;&#34; /&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;사진 크기에 따른 처리결과
정상작동
시간초과 결과 노출x
어플 오류
800 x 480
640 x 480
1600 x 960
1280 x 960
2560 x 1920&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>